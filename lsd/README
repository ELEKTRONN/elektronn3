Konzept: LSD-transfomration des Targets implementieren um dann ein UNET darauf zu trainieren
1. LSD-transformator wÃhlen
2. Implementierung ausarbeiten
    a. Welcher Datentyp waere eine LSD?
        LSD kann man wie eine Elektronn3-transforms-Klasse als Numpy array formulieren
    b. Welcher Datentyp hat eine Segmentation/Target?
        Ein Tensor mit labels die 1 oder 0 sind (muss ich noch nachsehen aber die ganzen cluster machinen sind besetzt)
    c. Welcher Datensatz ist ueberhaupt gefragt?
        Philipp Schubert sagt: "Zellsegmentierung - da hast du den ganzen Datensatz als GT"
    d. Wie kann man aus dem Datentyp den LSD erstellen?
        Siehe numpy.ndimage paket
    e. Was ist eine gutes datenformat fÃr den LSD? Es wÃre schÃn
       ein mehrdimensionales Vektorfeld zu haben in welchem man
       fuer jedes Element im output also im datensatz bzw fuer
       jedes Pixel was gelabelled ist einen array/vektor hat in dem jede komponente eine andere Information ueber das gelabellede objekt hat.
    ===>>> wie kann man einen array vom center-of-mass generieren            in dem jedes element einen abstandsvektor zum ceneter-of-mass generiert?
TO Implement:
1. vdt=vigra boundary vector distance transform of the segmentation
2. linalg.norm(vdt)
3. vigra gaussian divergence of the vector distance transform (normalized)
#4. CenterOfMass(Seg) left out because not implemented

LSD transformer funktioniert, als elektronn3-transformation, training läuft

jetzt wichtig: visualisierer schreiben, sodass man ergebnisse betrachten kann.
wie macht man das?

*Visualisierer

**was wird im paper wie veranschaulicht? schwer zu sagen, im repository ist es nicht klar und deutlich
**idee: für 3d vektor-daten werden die rgb-werte aus den distanzen gelesen, also Rot(x) Grün(y) Blau(z)
also dafür braucht man:

**das gespeicherte netz, was geladen werden muss
***pfad->pytorch->finde das netz

**das geladene netz muss auf einem geladenen datensatz predictions machen
***finde datensatz
***lade datensatz in bestimmtes format
***füttere es durch das netz
***speichere es

**die predictions müssen für den festen cube zusammen mit den rohdaten geplotted werden.
***verwende matplotlib dafür
